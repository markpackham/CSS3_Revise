/* Responsive Design (for dealing with sites viewed on various devices & browsers - key for mobile first design) */

/*
A very common layout used for handling images and videos
You usually want the overflow hidden to avoid stuff being obscured
and you want to make sure inline-blocks aren't used, your image
will usually want to sit on its own
*/

.container {
  width: 50%;
  height: 200px;
  overflow: hidden;
}

.container img {
  max-width: 100%;
  height: auto;
  display: block;
}

/*
Common layout for a background image
*/
body {
  background-image: url("#");
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
}

/*
Content on a website can be sized relative to other elements on the page using relative measurements.
The unit of em sizes font relative to the font size of a parent element.
The unit of rem sizes font relative to the font size of a root element. That root element is the <html> element.

Percentages are commonly used to size box-model features, like the width, height, padding, or margin of an element.
When percentages are used to size width and height, child elements will be sized relative to the dimensions of their parent 
(remember that parent dimensions must first be set).

Percentages can be used to set padding and margin. Horizontal and vertical padding and margin are set relative to the width of a parent element.
The minimum and maximum width of elements can be set using min-width and max-width.
The minimum and maximum height of elements can be set using min-height and max-height.

When the height of an image or video is set, then its width can be set to auto so that the media scales proportionally. 
Reversing these two properties and values will also achieve the same result.

A background image of an HTML element will scale proportionally when its background-size property is set to cover.
*/

/* Media setting examples */
@media only screen and (max-width: 480px) {
  body {
    font-size: 12px;
  }
}

/* You can do this */
@media only screen and (min-width: 320px) {
  /* ruleset for >= 320px */
}

@media only screen and (min-width: 480px) {
  /* ruleset for >= 480px */
}
/* Or this which has the same effect as above */
@media only screen and (min-width: 320px) and (max-width: 480px) {
  /* ruleset for 320px - 480px */
}

/*
@media — This keyword begins a media query rule and instructs the CSS compiler on how to parse the rest of the rule.

only screen — Indicates what types of devices should use this rule. In early attempts to target different devices, CSS incorporated different media types 
(screen, print, handheld). 
The rationale was that by knowing the media type, the proper CSS rules could be applied. However, “handheld” and “screen” devices began to occupy a much wider range of 
sizes and having only one CSS rule per media device was not sufficient. screen is the media type always used for displaying content, no matter the type of device. 
The only keyword is added to indicate that this rule only applies to one media type (screen).

(max-width : 480px) — This part of the rule is called a media feature, and instructs the CSS compiler to apply the CSS styles to devices with a width of 480 pixels 
or smaller. Media features are the conditions that must be met in order to render the CSS within a media query.
CSS rules are nested inside of the media query’s curly braces. The rules will be applied when the media query is met. 
In the example above, the text in the body element is set to a font-size of 12px when the user’s screen is less than 480px.
*/

/*
Dots per inch and dots per centimeter
*/
/*
Dots Per Inch (DPI)
Another media feature we can target is screen resolution. 
Many times we will want to supply higher quality media (images, video, etc.) only to users with screens that can support high resolution media. 
Targeting screen resolution also helps users avoid downloading high resolution (large file size) images that their screen may not be able to properly display.

To target by resolution, we can use the min-resolution and max-resolution media features. 
These media features accept a resolution value in either dots per inch (dpi) or dots per centimeter (dpc).
*/
@media only screen and (min-resolution: 300dpi) {
  /* CSS for high resolution screens */
}

/*
Comma Separated List is like an OR condition for media queries which makes it differnt from AND
If only one of multiple media features in a media query must be met, media features can be separated in a comma separated list.
*/
@media only screen and (min-width: 480px), (orientation: landscape) {
  /* CSS ruleset */
}

/*
Breakpoints are the screen sizes at which your web page does not appear properly. For example, if we want to target tablets that are in landscape orientation, 
we can create the following breakpoint:
*/
@media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
  /* CSS ruleset */
}
/*
Various Breakpoints
https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-5/screen-sizes.png
*/

/*
When a website responds to the size of the screen it’s viewed on, it’s called a responsive website.
You can write media queries to help with different screen sizes.
Media queries require media features. Media features are the conditions that must be met to render the CSS within a media query.
Media features can detect many aspects of a user’s browser, including the screen’s width, height, resolution, orientation, and more.
The and operator requires multiple media features to be true at once.
A comma separated list of media features only requires one media feature to be true for the code within to be applied.
The best practice for identifying where media queries should be set is by resizing the browser to determine where the content naturally breaks. 
Natural breakpoints are found by resizing the browser.
*/
